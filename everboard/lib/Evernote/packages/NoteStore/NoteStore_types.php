<?php
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';

include_once $GLOBALS['THRIFT_ROOT'].'/packages/UserStore/UserStore_types.php';
include_once $GLOBALS['THRIFT_ROOT'].'/packages/Types/Types_types.php';
include_once $GLOBALS['THRIFT_ROOT'].'/packages/Errors/Errors_types.php';
include_once $GLOBALS['THRIFT_ROOT'].'/packages/Limits/Limits_types.php';

class edam_notestore_SyncState {
  static $_TSPEC;

  public $currentTime = null;
  public $fullSyncBefore = null;
  public $updateCount = null;
  public $uploaded = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'currentTime',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'fullSyncBefore',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'updateCount',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'uploaded',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['currentTime'])) {
        $this->currentTime = $vals['currentTime'];
      }
      if (isset($vals['fullSyncBefore'])) {
        $this->fullSyncBefore = $vals['fullSyncBefore'];
      }
      if (isset($vals['updateCount'])) {
        $this->updateCount = $vals['updateCount'];
      }
      if (isset($vals['uploaded'])) {
        $this->uploaded = $vals['uploaded'];
      }
    }
  }

  public function getName() {
    return 'SyncState';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->currentTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->fullSyncBefore);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->updateCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->uploaded);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SyncState');
    if ($this->currentTime !== null) {
      $xfer += $output->writeFieldBegin('currentTime', TType::I64, 1);
      $xfer += $output->writeI64($this->currentTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fullSyncBefore !== null) {
      $xfer += $output->writeFieldBegin('fullSyncBefore', TType::I64, 2);
      $xfer += $output->writeI64($this->fullSyncBefore);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->updateCount !== null) {
      $xfer += $output->writeFieldBegin('updateCount', TType::I32, 3);
      $xfer += $output->writeI32($this->updateCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uploaded !== null) {
      $xfer += $output->writeFieldBegin('uploaded', TType::I64, 4);
      $xfer += $output->writeI64($this->uploaded);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class edam_notestore_SyncChunk {
  static $_TSPEC;

  public $currentTime = null;
  public $chunkHighUSN = null;
  public $updateCount = null;
  public $notes = null;
  public $notebooks = null;
  public $tags = null;
  public $searches = null;
  public $resources = null;
  public $expungedNotes = null;
  public $expungedNotebooks = null;
  public $expungedTags = null;
  public $expungedSearches = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'currentTime',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'chunkHighUSN',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'updateCount',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'notes',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'edam_type_Note',
            ),
          ),
        5 => array(
          'var' => 'notebooks',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'edam_type_Notebook',
            ),
          ),
        6 => array(
          'var' => 'tags',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'edam_type_Tag',
            ),
          ),
        7 => array(
          'var' => 'searches',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'edam_type_SavedSearch',
            ),
          ),
        8 => array(
          'var' => 'resources',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'edam_type_Resource',
            ),
          ),
        9 => array(
          'var' => 'expungedNotes',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        10 => array(
          'var' => 'expungedNotebooks',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        11 => array(
          'var' => 'expungedTags',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        12 => array(
          'var' => 'expungedSearches',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['currentTime'])) {
        $this->currentTime = $vals['currentTime'];
      }
      if (isset($vals['chunkHighUSN'])) {
        $this->chunkHighUSN = $vals['chunkHighUSN'];
      }
      if (isset($vals['updateCount'])) {
        $this->updateCount = $vals['updateCount'];
      }
      if (isset($vals['notes'])) {
        $this->notes = $vals['notes'];
      }
      if (isset($vals['notebooks'])) {
        $this->notebooks = $vals['notebooks'];
      }
      if (isset($vals['tags'])) {
        $this->tags = $vals['tags'];
      }
      if (isset($vals['searches'])) {
        $this->searches = $vals['searches'];
      }
      if (isset($vals['resources'])) {
        $this->resources = $vals['resources'];
      }
      if (isset($vals['expungedNotes'])) {
        $this->expungedNotes = $vals['expungedNotes'];
      }
      if (isset($vals['expungedNotebooks'])) {
        $this->expungedNotebooks = $vals['expungedNotebooks'];
      }
      if (isset($vals['expungedTags'])) {
        $this->expungedTags = $vals['expungedTags'];
      }
      if (isset($vals['expungedSearches'])) {
        $this->expungedSearches = $vals['expungedSearches'];
      }
    }
  }

  public function getName() {
    return 'SyncChunk';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->currentTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->chunkHighUSN);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->updateCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->notes = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new edam_type_Note();
              $xfer += $elem5->read($input);
              $this->notes []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->notebooks = array();
            $_size6 = 0;
            $_etype9 = 0;
            $xfer += $input->readListBegin($_etype9, $_size6);
            for ($_i10 = 0; $_i10 < $_size6; ++$_i10)
            {
              $elem11 = null;
              $elem11 = new edam_type_Notebook();
              $xfer += $elem11->read($input);
              $this->notebooks []= $elem11;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::LST) {
            $this->tags = array();
            $_size12 = 0;
            $_etype15 = 0;
            $xfer += $input->readListBegin($_etype15, $_size12);
            for ($_i16 = 0; $_i16 < $_size12; ++$_i16)
            {
              $elem17 = null;
              $elem17 = new edam_type_Tag();
              $xfer += $elem17->read($input);
              $this->tags []= $elem17;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::LST) {
            $this->searches = array();
            $_size18 = 0;
            $_etype21 = 0;
            $xfer += $input->readListBegin($_etype21, $_size18);
            for ($_i22 = 0; $_i22 < $_size18; ++$_i22)
            {
              $elem23 = null;
              $elem23 = new edam_type_SavedSearch();
              $xfer += $elem23->read($input);
              $this->searches []= $elem23;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::LST) {
            $this->resources = array();
            $_size24 = 0;
            $_etype27 = 0;
            $xfer += $input->readListBegin($_etype27, $_size24);
            for ($_i28 = 0; $_i28 < $_size24; ++$_i28)
            {
              $elem29 = null;
              $elem29 = new edam_type_Resource();
              $xfer += $elem29->read($input);
              $this->resources []= $elem29;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::LST) {
            $this->expungedNotes = array();
            $_size30 = 0;
            $_etype33 = 0;
            $xfer += $input->readListBegin($_etype33, $_size30);
            for ($_i34 = 0; $_i34 < $_size30; ++$_i34)
            {
              $elem35 = null;
              $xfer += $input->readString($elem35);
              $this->expungedNotes []= $elem35;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::LST) {
            $this->expungedNotebooks = array();
            $_size36 = 0;
            $_etype39 = 0;
            $xfer += $input->readListBegin($_etype39, $_size36);
            for ($_i40 = 0; $_i40 < $_size36; ++$_i40)
            {
              $elem41 = null;
              $xfer += $input->readString($elem41);
              $this->expungedNotebooks []= $elem41;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::LST) {
            $this->expungedTags = array();
            $_size42 = 0;
            $_etype45 = 0;
            $xfer += $input->readListBegin($_etype45, $_size42);
            for ($_i46 = 0; $_i46 < $_size42; ++$_i46)
            {
              $elem47 = null;
              $xfer += $input->readString($elem47);
              $this->expungedTags []= $elem47;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::LST) {
            $this->expungedSearches = array();
            $_size48 = 0;
            $_etype51 = 0;
            $xfer += $input->readListBegin($_etype51, $_size48);
            for ($_i52 = 0; $_i52 < $_size48; ++$_i52)
            {
              $elem53 = null;
              $xfer += $input->readString($elem53);
              $this->expungedSearches []= $elem53;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SyncChunk');
    if ($this->currentTime !== null) {
      $xfer += $output->writeFieldBegin('currentTime', TType::I64, 1);
      $xfer += $output->writeI64($this->currentTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->chunkHighUSN !== null) {
      $xfer += $output->writeFieldBegin('chunkHighUSN', TType::I32, 2);
      $xfer += $output->writeI32($this->chunkHighUSN);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->updateCount !== null) {
      $xfer += $output->writeFieldBegin('updateCount', TType::I32, 3);
      $xfer += $output->writeI32($this->updateCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notes !== null) {
      if (!is_array($this->notes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notes', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->notes));
        {
          foreach ($this->notes as $iter54)
          {
            $xfer += $iter54->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notebooks !== null) {
      if (!is_array($this->notebooks)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notebooks', TType::LST, 5);
      {
        $output->writeListBegin(TType::STRUCT, count($this->notebooks));
        {
          foreach ($this->notebooks as $iter55)
          {
            $xfer += $iter55->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tags !== null) {
      if (!is_array($this->tags)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('tags', TType::LST, 6);
      {
        $output->writeListBegin(TType::STRUCT, count($this->tags));
        {
          foreach ($this->tags as $iter56)
          {
            $xfer += $iter56->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->searches !== null) {
      if (!is_array($this->searches)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('searches', TType::LST, 7);
      {
        $output->writeListBegin(TType::STRUCT, count($this->searches));
        {
          foreach ($this->searches as $iter57)
          {
            $xfer += $iter57->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->resources !== null) {
      if (!is_array($this->resources)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('resources', TType::LST, 8);
      {
        $output->writeListBegin(TType::STRUCT, count($this->resources));
        {
          foreach ($this->resources as $iter58)
          {
            $xfer += $iter58->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expungedNotes !== null) {
      if (!is_array($this->expungedNotes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('expungedNotes', TType::LST, 9);
      {
        $output->writeListBegin(TType::STRING, count($this->expungedNotes));
        {
          foreach ($this->expungedNotes as $iter59)
          {
            $xfer += $output->writeString($iter59);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expungedNotebooks !== null) {
      if (!is_array($this->expungedNotebooks)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('expungedNotebooks', TType::LST, 10);
      {
        $output->writeListBegin(TType::STRING, count($this->expungedNotebooks));
        {
          foreach ($this->expungedNotebooks as $iter60)
          {
            $xfer += $output->writeString($iter60);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expungedTags !== null) {
      if (!is_array($this->expungedTags)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('expungedTags', TType::LST, 11);
      {
        $output->writeListBegin(TType::STRING, count($this->expungedTags));
        {
          foreach ($this->expungedTags as $iter61)
          {
            $xfer += $output->writeString($iter61);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expungedSearches !== null) {
      if (!is_array($this->expungedSearches)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('expungedSearches', TType::LST, 12);
      {
        $output->writeListBegin(TType::STRING, count($this->expungedSearches));
        {
          foreach ($this->expungedSearches as $iter62)
          {
            $xfer += $output->writeString($iter62);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class edam_notestore_NoteFilter {
  static $_TSPEC;

  public $order = null;
  public $ascending = null;
  public $words = null;
  public $notebookGuid = null;
  public $tagGuids = null;
  public $timeZone = null;
  public $inactive = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'ascending',
          'type' => TType::BOOL,
          ),
        3 => array(
          'var' => 'words',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'notebookGuid',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'tagGuids',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        6 => array(
          'var' => 'timeZone',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'inactive',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['order'])) {
        $this->order = $vals['order'];
      }
      if (isset($vals['ascending'])) {
        $this->ascending = $vals['ascending'];
      }
      if (isset($vals['words'])) {
        $this->words = $vals['words'];
      }
      if (isset($vals['notebookGuid'])) {
        $this->notebookGuid = $vals['notebookGuid'];
      }
      if (isset($vals['tagGuids'])) {
        $this->tagGuids = $vals['tagGuids'];
      }
      if (isset($vals['timeZone'])) {
        $this->timeZone = $vals['timeZone'];
      }
      if (isset($vals['inactive'])) {
        $this->inactive = $vals['inactive'];
      }
    }
  }

  public function getName() {
    return 'NoteFilter';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->order);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->ascending);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->words);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->notebookGuid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->tagGuids = array();
            $_size63 = 0;
            $_etype66 = 0;
            $xfer += $input->readListBegin($_etype66, $_size63);
            for ($_i67 = 0; $_i67 < $_size63; ++$_i67)
            {
              $elem68 = null;
              $xfer += $input->readString($elem68);
              $this->tagGuids []= $elem68;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timeZone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->inactive);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NoteFilter');
    if ($this->order !== null) {
      $xfer += $output->writeFieldBegin('order', TType::I32, 1);
      $xfer += $output->writeI32($this->order);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ascending !== null) {
      $xfer += $output->writeFieldBegin('ascending', TType::BOOL, 2);
      $xfer += $output->writeBool($this->ascending);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->words !== null) {
      $xfer += $output->writeFieldBegin('words', TType::STRING, 3);
      $xfer += $output->writeString($this->words);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notebookGuid !== null) {
      $xfer += $output->writeFieldBegin('notebookGuid', TType::STRING, 4);
      $xfer += $output->writeString($this->notebookGuid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tagGuids !== null) {
      if (!is_array($this->tagGuids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('tagGuids', TType::LST, 5);
      {
        $output->writeListBegin(TType::STRING, count($this->tagGuids));
        {
          foreach ($this->tagGuids as $iter69)
          {
            $xfer += $output->writeString($iter69);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timeZone !== null) {
      $xfer += $output->writeFieldBegin('timeZone', TType::STRING, 6);
      $xfer += $output->writeString($this->timeZone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->inactive !== null) {
      $xfer += $output->writeFieldBegin('inactive', TType::BOOL, 7);
      $xfer += $output->writeBool($this->inactive);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class edam_notestore_NoteList {
  static $_TSPEC;

  public $startIndex = null;
  public $totalNotes = null;
  public $notes = null;
  public $stoppedWords = null;
  public $searchedWords = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'startIndex',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'totalNotes',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'notes',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'edam_type_Note',
            ),
          ),
        4 => array(
          'var' => 'stoppedWords',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        5 => array(
          'var' => 'searchedWords',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['startIndex'])) {
        $this->startIndex = $vals['startIndex'];
      }
      if (isset($vals['totalNotes'])) {
        $this->totalNotes = $vals['totalNotes'];
      }
      if (isset($vals['notes'])) {
        $this->notes = $vals['notes'];
      }
      if (isset($vals['stoppedWords'])) {
        $this->stoppedWords = $vals['stoppedWords'];
      }
      if (isset($vals['searchedWords'])) {
        $this->searchedWords = $vals['searchedWords'];
      }
    }
  }

  public function getName() {
    return 'NoteList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->startIndex);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->totalNotes);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->notes = array();
            $_size70 = 0;
            $_etype73 = 0;
            $xfer += $input->readListBegin($_etype73, $_size70);
            for ($_i74 = 0; $_i74 < $_size70; ++$_i74)
            {
              $elem75 = null;
              $elem75 = new edam_type_Note();
              $xfer += $elem75->read($input);
              $this->notes []= $elem75;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->stoppedWords = array();
            $_size76 = 0;
            $_etype79 = 0;
            $xfer += $input->readListBegin($_etype79, $_size76);
            for ($_i80 = 0; $_i80 < $_size76; ++$_i80)
            {
              $elem81 = null;
              $xfer += $input->readString($elem81);
              $this->stoppedWords []= $elem81;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->searchedWords = array();
            $_size82 = 0;
            $_etype85 = 0;
            $xfer += $input->readListBegin($_etype85, $_size82);
            for ($_i86 = 0; $_i86 < $_size82; ++$_i86)
            {
              $elem87 = null;
              $xfer += $input->readString($elem87);
              $this->searchedWords []= $elem87;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NoteList');
    if ($this->startIndex !== null) {
      $xfer += $output->writeFieldBegin('startIndex', TType::I32, 1);
      $xfer += $output->writeI32($this->startIndex);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalNotes !== null) {
      $xfer += $output->writeFieldBegin('totalNotes', TType::I32, 2);
      $xfer += $output->writeI32($this->totalNotes);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notes !== null) {
      if (!is_array($this->notes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notes', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->notes));
        {
          foreach ($this->notes as $iter88)
          {
            $xfer += $iter88->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->stoppedWords !== null) {
      if (!is_array($this->stoppedWords)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('stoppedWords', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRING, count($this->stoppedWords));
        {
          foreach ($this->stoppedWords as $iter89)
          {
            $xfer += $output->writeString($iter89);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->searchedWords !== null) {
      if (!is_array($this->searchedWords)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('searchedWords', TType::LST, 5);
      {
        $output->writeListBegin(TType::STRING, count($this->searchedWords));
        {
          foreach ($this->searchedWords as $iter90)
          {
            $xfer += $output->writeString($iter90);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class edam_notestore_NoteCollectionCounts {
  static $_TSPEC;

  public $notebookCounts = null;
  public $tagCounts = null;
  public $trashCount = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'notebookCounts',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::I32,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::I32,
            ),
          ),
        2 => array(
          'var' => 'tagCounts',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::I32,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::I32,
            ),
          ),
        3 => array(
          'var' => 'trashCount',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['notebookCounts'])) {
        $this->notebookCounts = $vals['notebookCounts'];
      }
      if (isset($vals['tagCounts'])) {
        $this->tagCounts = $vals['tagCounts'];
      }
      if (isset($vals['trashCount'])) {
        $this->trashCount = $vals['trashCount'];
      }
    }
  }

  public function getName() {
    return 'NoteCollectionCounts';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->notebookCounts = array();
            $_size91 = 0;
            $_ktype92 = 0;
            $_vtype93 = 0;
            $xfer += $input->readMapBegin($_ktype92, $_vtype93, $_size91);
            for ($_i95 = 0; $_i95 < $_size91; ++$_i95)
            {
              $key96 = '';
              $val97 = 0;
              $xfer += $input->readString($key96);
              $xfer += $input->readI32($val97);
              $this->notebookCounts[$key96] = $val97;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->tagCounts = array();
            $_size98 = 0;
            $_ktype99 = 0;
            $_vtype100 = 0;
            $xfer += $input->readMapBegin($_ktype99, $_vtype100, $_size98);
            for ($_i102 = 0; $_i102 < $_size98; ++$_i102)
            {
              $key103 = '';
              $val104 = 0;
              $xfer += $input->readString($key103);
              $xfer += $input->readI32($val104);
              $this->tagCounts[$key103] = $val104;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->trashCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NoteCollectionCounts');
    if ($this->notebookCounts !== null) {
      if (!is_array($this->notebookCounts)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('notebookCounts', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::I32, count($this->notebookCounts));
        {
          foreach ($this->notebookCounts as $kiter105 => $viter106)
          {
            $xfer += $output->writeString($kiter105);
            $xfer += $output->writeI32($viter106);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tagCounts !== null) {
      if (!is_array($this->tagCounts)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('tagCounts', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::I32, count($this->tagCounts));
        {
          foreach ($this->tagCounts as $kiter107 => $viter108)
          {
            $xfer += $output->writeString($kiter107);
            $xfer += $output->writeI32($viter108);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->trashCount !== null) {
      $xfer += $output->writeFieldBegin('trashCount', TType::I32, 3);
      $xfer += $output->writeI32($this->trashCount);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class edam_notestore_AdImpressions {
  static $_TSPEC;

  public $adId = null;
  public $impressionCount = null;
  public $impressionTime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'adId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'impressionCount',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'impressionTime',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['adId'])) {
        $this->adId = $vals['adId'];
      }
      if (isset($vals['impressionCount'])) {
        $this->impressionCount = $vals['impressionCount'];
      }
      if (isset($vals['impressionTime'])) {
        $this->impressionTime = $vals['impressionTime'];
      }
    }
  }

  public function getName() {
    return 'AdImpressions';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->adId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->impressionCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->impressionTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdImpressions');
    if ($this->adId !== null) {
      $xfer += $output->writeFieldBegin('adId', TType::I32, 1);
      $xfer += $output->writeI32($this->adId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->impressionCount !== null) {
      $xfer += $output->writeFieldBegin('impressionCount', TType::I32, 2);
      $xfer += $output->writeI32($this->impressionCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->impressionTime !== null) {
      $xfer += $output->writeFieldBegin('impressionTime', TType::I32, 3);
      $xfer += $output->writeI32($this->impressionTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class edam_notestore_AdParameters {
  static $_TSPEC;

  public $clientLanguage = null;
  public $impressions = null;
  public $supportHtml = null;
  public $clientProperties = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        2 => array(
          'var' => 'clientLanguage',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'impressions',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'edam_notestore_AdImpressions',
            ),
          ),
        5 => array(
          'var' => 'supportHtml',
          'type' => TType::BOOL,
          ),
        6 => array(
          'var' => 'clientProperties',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['clientLanguage'])) {
        $this->clientLanguage = $vals['clientLanguage'];
      }
      if (isset($vals['impressions'])) {
        $this->impressions = $vals['impressions'];
      }
      if (isset($vals['supportHtml'])) {
        $this->supportHtml = $vals['supportHtml'];
      }
      if (isset($vals['clientProperties'])) {
        $this->clientProperties = $vals['clientProperties'];
      }
    }
  }

  public function getName() {
    return 'AdParameters';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientLanguage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->impressions = array();
            $_size109 = 0;
            $_etype112 = 0;
            $xfer += $input->readListBegin($_etype112, $_size109);
            for ($_i113 = 0; $_i113 < $_size109; ++$_i113)
            {
              $elem114 = null;
              $elem114 = new edam_notestore_AdImpressions();
              $xfer += $elem114->read($input);
              $this->impressions []= $elem114;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->supportHtml);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::MAP) {
            $this->clientProperties = array();
            $_size115 = 0;
            $_ktype116 = 0;
            $_vtype117 = 0;
            $xfer += $input->readMapBegin($_ktype116, $_vtype117, $_size115);
            for ($_i119 = 0; $_i119 < $_size115; ++$_i119)
            {
              $key120 = '';
              $val121 = '';
              $xfer += $input->readString($key120);
              $xfer += $input->readString($val121);
              $this->clientProperties[$key120] = $val121;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdParameters');
    if ($this->clientLanguage !== null) {
      $xfer += $output->writeFieldBegin('clientLanguage', TType::STRING, 2);
      $xfer += $output->writeString($this->clientLanguage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->impressions !== null) {
      if (!is_array($this->impressions)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('impressions', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->impressions));
        {
          foreach ($this->impressions as $iter122)
          {
            $xfer += $iter122->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->supportHtml !== null) {
      $xfer += $output->writeFieldBegin('supportHtml', TType::BOOL, 5);
      $xfer += $output->writeBool($this->supportHtml);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientProperties !== null) {
      if (!is_array($this->clientProperties)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('clientProperties', TType::MAP, 6);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->clientProperties));
        {
          foreach ($this->clientProperties as $kiter123 => $viter124)
          {
            $xfer += $output->writeString($kiter123);
            $xfer += $output->writeString($viter124);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class edam_notestore_NoteEmailParameters {
  static $_TSPEC;

  public $guid = null;
  public $note = null;
  public $toAddresses = null;
  public $ccAddresses = null;
  public $subject = null;
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'guid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'note',
          'type' => TType::STRUCT,
          'class' => 'edam_type_Note',
          ),
        3 => array(
          'var' => 'toAddresses',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        4 => array(
          'var' => 'ccAddresses',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        5 => array(
          'var' => 'subject',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['guid'])) {
        $this->guid = $vals['guid'];
      }
      if (isset($vals['note'])) {
        $this->note = $vals['note'];
      }
      if (isset($vals['toAddresses'])) {
        $this->toAddresses = $vals['toAddresses'];
      }
      if (isset($vals['ccAddresses'])) {
        $this->ccAddresses = $vals['ccAddresses'];
      }
      if (isset($vals['subject'])) {
        $this->subject = $vals['subject'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'NoteEmailParameters';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->guid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->note = new edam_type_Note();
            $xfer += $this->note->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->toAddresses = array();
            $_size125 = 0;
            $_etype128 = 0;
            $xfer += $input->readListBegin($_etype128, $_size125);
            for ($_i129 = 0; $_i129 < $_size125; ++$_i129)
            {
              $elem130 = null;
              $xfer += $input->readString($elem130);
              $this->toAddresses []= $elem130;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->ccAddresses = array();
            $_size131 = 0;
            $_etype134 = 0;
            $xfer += $input->readListBegin($_etype134, $_size131);
            for ($_i135 = 0; $_i135 < $_size131; ++$_i135)
            {
              $elem136 = null;
              $xfer += $input->readString($elem136);
              $this->ccAddresses []= $elem136;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->subject);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NoteEmailParameters');
    if ($this->guid !== null) {
      $xfer += $output->writeFieldBegin('guid', TType::STRING, 1);
      $xfer += $output->writeString($this->guid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->note !== null) {
      if (!is_object($this->note)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('note', TType::STRUCT, 2);
      $xfer += $this->note->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->toAddresses !== null) {
      if (!is_array($this->toAddresses)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('toAddresses', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRING, count($this->toAddresses));
        {
          foreach ($this->toAddresses as $iter137)
          {
            $xfer += $output->writeString($iter137);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ccAddresses !== null) {
      if (!is_array($this->ccAddresses)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ccAddresses', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRING, count($this->ccAddresses));
        {
          foreach ($this->ccAddresses as $iter138)
          {
            $xfer += $output->writeString($iter138);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->subject !== null) {
      $xfer += $output->writeFieldBegin('subject', TType::STRING, 5);
      $xfer += $output->writeString($this->subject);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 6);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class edam_notestore_NoteVersionId {
  static $_TSPEC;

  public $updateSequenceNum = null;
  public $updated = null;
  public $serviceUpdated = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'updateSequenceNum',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'updated',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'serviceUpdated',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['updateSequenceNum'])) {
        $this->updateSequenceNum = $vals['updateSequenceNum'];
      }
      if (isset($vals['updated'])) {
        $this->updated = $vals['updated'];
      }
      if (isset($vals['serviceUpdated'])) {
        $this->serviceUpdated = $vals['serviceUpdated'];
      }
    }
  }

  public function getName() {
    return 'NoteVersionId';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->updateSequenceNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->updated);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->serviceUpdated);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NoteVersionId');
    if ($this->updateSequenceNum !== null) {
      $xfer += $output->writeFieldBegin('updateSequenceNum', TType::I32, 1);
      $xfer += $output->writeI32($this->updateSequenceNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->updated !== null) {
      $xfer += $output->writeFieldBegin('updated', TType::I64, 2);
      $xfer += $output->writeI64($this->updated);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serviceUpdated !== null) {
      $xfer += $output->writeFieldBegin('serviceUpdated', TType::I64, 3);
      $xfer += $output->writeI64($this->serviceUpdated);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
